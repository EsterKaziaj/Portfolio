@model Evente.Models.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="dashboard-container">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="dashboard-title">Event Management Dashboard</h1>
            <p class="text-muted">Overview of your event business performance</p>
        </div>
    </div>

    <!-- KPI Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Tickets Sold</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.TotalTicketsSold.ToString("N0")</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-ticket-alt fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Total Revenue</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">$@Model.TotalRevenue.ToString("N2")</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Active Events</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.ActiveEvents</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Total Categories</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.TotalCategories</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-tags fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row">
        <!-- Sales Chart -->
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Sales Overview</h6>
                    <div class="dropdown no-arrow">
                        <select id="periodSelect" class="form-control form-control-sm" style="width: auto;">
                            <option value="weekly">Weekly</option>
                            <option value="daily">Daily</option>
                            <option value="monthly">Monthly</option>
                        </select>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="salesChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Category Distribution Chart -->
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Event Categories</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie pt-4 pb-2">
                        <canvas id="categoryChart"></canvas>
                    </div>
                    <div class="mt-4 text-center small">
                        @foreach (var category in Model.CategoryData)
                        {
                            <span class="mr-2">
                                <i class="fas fa-circle" style="color: @GetCategoryColor(category.Name)"></i> @category.Name (@category.Count)
                            </span>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Events Table -->
    <div class="row">
        <div class="col-lg-12 mb-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Recent Events</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" width="100%" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>Event Name</th>
                                    <th>Category</th>
                                    <th>Date</th>
                                    <th>Available Seats</th>
                                    <th>Ticket Price</th>
                                    <th>Location</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var evt in Model.RecentEvents)
                                {
                                    <tr>
                                        <td>@evt.Name</td>
                                        <td>@evt.Kategori?.Name</td>
                                        <td>@evt.Date.ToString("MMM dd, yyyy")</td>
                                        <td>@evt.AvailableSeats</td>
                                        <td>$@evt.TicketPrice.ToString("N2")</td>
                                        <td>@evt.Location</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetCategoryColor(string categoryName)
    {
        var colors = new[] { "#4e73df", "#1cc88a", "#36b9cc", "#f6c23e", "#e74a3b", "#858796" };
        return colors[Math.Abs(categoryName.GetHashCode()) % colors.Length];
    }
}

<style>
    .dashboard-container {
        padding: 20px;
    }

    .dashboard-title {
        color: #5a5c69;
        font-size: 2rem;
        font-weight: 400;
    }

    .card {
        box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15) !important;
        border: 1px solid #e3e6f0;
    }

    .border-left-primary {
        border-left: 0.25rem solid #4e73df !important;
    }

    .border-left-success {
        border-left: 0.25rem solid #1cc88a !important;
    }

    .border-left-info {
        border-left: 0.25rem solid #36b9cc !important;
    }

    .border-left-warning {
        border-left: 0.25rem solid #f6c23e !important;
    }

    .text-primary {
        color: #4e73df !important;
    }

    .text-success {
        color: #1cc88a !important;
    }

    .text-info {
        color: #36b9cc !important;
    }

    .text-warning {
        color: #f6c23e !important;
    }

    .text-gray-800 {
        color: #5a5c69 !important;
    }

    .text-gray-300 {
        color: #dddfeb !important;
    }

    .chart-area {
        position: relative;
        height: 10rem;
        width: 100%;
    }

    .chart-pie {
        position: relative;
        height: 15rem;
        width: 100%;
    }

    #salesChart, #categoryChart {
        height: 100% !important;
        width: 100% !important;
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
<script>
    // Initialize charts
    let salesChart;
    let categoryChart;

    // Initial data from server
    const initialWeeklySalesData = @Html.Raw(Json.Serialize(Model.WeeklySalesData));
    const categoryData = @Html.Raw(Json.Serialize(Model.CategoryData));

    // Initialize Sales Chart
    function initSalesChart(data, period = 'weekly') {
        const ctx = document.getElementById('salesChart').getContext('2d');

        if (salesChart) {
            salesChart.destroy();
        }

        let labels, thisLabel, lastLabel;

        if (period === 'weekly') {
            labels = data.map(d => d.week || d.Week);
            thisLabel = 'This Month';
            lastLabel = 'Last Month';
        } else if (period === 'daily') {
            labels = data.map(d => d.day);
            thisLabel = 'This Week';
            lastLabel = 'Last Week';
        } else {
            labels = data.map(d => d.month);
            thisLabel = 'This Year';
            lastLabel = 'Last Year';
        }

        salesChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: thisLabel,
                    data: data.map(d => d.thisMonth || d.thisWeek || d.thisYear),
                    borderColor: '#4e73df',
                    backgroundColor: 'rgba(78, 115, 223, 0.05)',
                    borderWidth: 2,
                    fill: true
                }, {
                    label: lastLabel,
                    data: data.map(d => d.lastMonth || d.lastWeek || d.lastYear),
                    borderColor: '#1cc88a',
                    backgroundColor: 'rgba(28, 200, 138, 0.05)',
                    borderWidth: 2,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function (value) {
                                return '$' + value.toLocaleString();
                            }
                        }
                    }
                }
            }
        });
    }

    // Initialize Category Chart
    function initCategoryChart() {
        const ctx = document.getElementById('categoryChart').getContext('2d');

        const colors = ['#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b', '#858796'];

        categoryChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: categoryData.map(c => c.name || c.Name),
                datasets: [{
                    data: categoryData.map(c => c.count || c.Count),
                    backgroundColor: colors.slice(0, categoryData.length),
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    }

    // Period selector change handler
    document.getElementById('periodSelect').addEventListener('change', function () {
        const period = this.value;

        fetch(/Dashboard/GetSalesData?period=${period})
            .then(response => response.json())
            .then(data => {
                initSalesChart(data, period);
            })
            .catch(error => {
                console.error('Error fetching sales data:', error);
            });
    });

    // Initialize charts when page loads
    document.addEventListener('DOMContentLoaded', function () {
        initSalesChart(initialWeeklySalesData, 'weekly');
        initCategoryChart();
    });
</script>